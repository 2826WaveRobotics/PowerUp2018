// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "DrivePID.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

namespace{
 const int c_CPR = 256;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
DrivePID::DrivePID() : PIDSubsystem("DrivePID", c_straightP, c_straightI, c_straightD) {
    SetAbsoluteTolerance(0.2);
    //GetPIDController()->SetContinuous(false);
    //frc::LiveWindow::GetInstance()->AddActuator("DrivePID", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    left1 = RobotMap::drivePIDLeft1;
    left2 = RobotMap::drivePIDLeft2;
    left3 = RobotMap::drivePIDLeft3;
    leftDriveGroup = RobotMap::drivePIDLeftDriveGroup;
    right1 = RobotMap::drivePIDRight1;
    right2 = RobotMap::drivePIDRight2;
    right3 = RobotMap::drivePIDRight3;
    rightDriveGroup = RobotMap::drivePIDRightDriveGroup;
    diffDrive = RobotMap::drivePIDDiffDrive;
    leftEncoder = RobotMap::drivePIDLeftEncoder;
    rightEncoder = RobotMap::drivePIDRightEncoder;
    shifter = RobotMap::drivePIDShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    right1->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
    right1->ConfigPeakOutputReverse(-100, 50);
    right1->ConfigPeakOutputForward(100, 50);
    right1->SetSafetyEnabled(false);

    right2->SetSafetyEnabled(false);
    right3->SetSafetyEnabled(false);

    left1->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
    left1->ConfigPeakOutputReverse(-100, 50);
    left1->ConfigPeakOutputForward(100, 50);
    left1->SetSafetyEnabled(false);

    left2->SetSafetyEnabled(false);
    left3->SetSafetyEnabled(false);


    gyro = NULL;

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double DrivePID::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return leftEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void DrivePID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    rightDriveGroup->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void DrivePID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DrivePID::ArcadeDrive(double forward, double turn) {
	diffDrive.get()->ArcadeDrive(forward, turn);

}

void DrivePID::DriveStraight(double power, double heading) {
	SetDirection(heading);
	double correction = GetPIDController()->Get();
	diffDrive.get()->TankDrive((power-correction), (power+correction));
}

void DrivePID::Shift(bool state) {
	shifter.get()->Set(state);

}

double DrivePID::GetRightEncoder() {
	double encoderCount = right1->GetSensorCollection().GetQuadraturePosition();
	double distance = encoderCount/c_CPR*6*3.1415;

	return distance;
}

double DrivePID::GetLeftEncoder() {
	double encoderCount = left1->GetSensorCollection().GetQuadraturePosition();
	double distance = encoderCount/c_CPR*6*3.1415;

	return distance;
}

double DrivePID::GetYaw(){
	if(!gyro){
		return gyro->GetYaw();
	}
	else{
		return 0;
	}
}

void DrivePID::SetPIDs(double kP, double kI, double kD) {
	GetPIDController()->SetPID(kP, kI, kD);
}

void DrivePID::SetDirection(double heading){
	if(GetPIDController()->GetSetpoint() != heading)
	{
		GetPIDController()->Disable();
		GetPIDController()->Reset();

		GetPIDController()->SetSetpoint(heading); //we are now facing the same way the entire time
		GetPIDController()->Enable();
	}
}
